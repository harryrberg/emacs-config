* Setting Environment Variables and Updating PATH
Properly setting environment variables ensures Emacs knows where to find your configuration, can connect to the server for *EMACSCLIENT*, and (optionally) can be run from any terminal without specifying the full path.

* Setting Environment Variables and Updating PATH
Properly setting environment variables ensures Emacs knows where to find your configuration, can connect to the server for *EMACSCLIENT*, and (optionally) can be run from any terminal without specifying the full path.

** 1. Setting Essential Variables (Required)
These must be set for a functional setup:
1. *HOME* — Tells Emacs your home directory location.
   - Value: =%USERPROFILE%=
2. *EMACS_SERVER_FILE* — Path to the Emacs server file, required if using *EMACSCLIENT*.
   - Value: =%USERPROFILE%\\.emacs.d\\server\\server=

** 2. Setting Optional Variables (Recommended in Certain Cases)
Use these for customization, locale settings, or improving workflow:
- *EMACSDIR* — Custom directory for your Emacs configuration.
  - Example: =D:\\Configs\\emacs.d=
- *LANG* / *LC_ALL* — Set locale and encoding.
  - Example: =en_US.UTF-8=
- *EMACSLOADPATH* — Add extra directories for Emacs Lisp files.
  - Example: =D:\\emacs-libs;E:\\more-libs=
- *TMPDIR* / *TEMP* / *TMP* — Custom temporary directory.
  - Example: =D:\\temp=
- *SHELL* — Default shell for Emacs.
  - Example: =C:\\msys64\\usr\\bin\\bash.exe=
- *PATH* — Add MSYS2 *mingw64* bin directory so Emacs is accessible from PowerShell or CMD.
  - Example: =C:\\msys64\\mingw64\\bin=

** 3. Manual Setup Instructions in Windows
These steps work on any Windows 10 or 11 system:
1. Open the Start Menu → Search for *Environment Variables* → Select *Edit the system environment variables*.
2. In the *System Properties* window, click *Environment Variables*.
3. Under *User variables*, click *New* and set:
   - Name: HOME
   - Value: =%USERPROFILE%=
4. Click *New* again and set:
   - Name: EMACS_SERVER_FILE
   - Value: =%USERPROFILE%\\.emacs.d\\server\\server=
5. (Optional) Repeat for any variables from *Section 2* you wish to configure.
6. (Optional) To add Emacs to PATH:
   - Select the *Path* variable under *User variables* → *Edit* → *New* → Enter =C:\\msys64\\mingw64\\bin=
7. Click *OK* on all windows to save.
8. Restart all terminals (PowerShell, CMD) for changes to take effect.

* Configuring Emacs
Open `init.org` in Emacs, customize as you wish, and run `org-babel-tangle` to produce `init.el`. This extracts all Emacs Lisp code blocks into `init.el`. Restart Emacs to activate the changes.

* Preamble
Automatically regenerate `init.el` whenever you save `init.org`, ensuring your setup stays in sync.

** Auto-tangle init.org on save
This function checks if you’re editing `~/.emacs.d/init.org` and tangles it on save.

#+BEGIN_SRC emacs-lisp
(defun tangle-init-file ()
  (when (equal (buffer-file-name) (expand-file-name "~/.emacs.d/init.org"))
    (org-babel-tangle)))
(add-hook 'after-save-hook 'tangle-init-file)
#+END_SRC

* Performance Tweaks
Adjusting garbage collection thresholds can speed up startup and keep runtime smooth.

** Boost startup speed
Set GC threshold high during launch:

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+END_SRC

** Optimize runtime
Lower GC threshold after Emacs loads:

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook (lambda () (setq gc-cons-threshold 16777216)))
#+END_SRC

* Package Management
We’ll configure `package.el` and `use-package` for flexible package handling.

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'org)
  (package-install 'org))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

* Appearance Settings
Customize Emacs visuals for a distraction-free, modern feel.

** Remove GUI clutter
Hide toolbar, scroll bar, and menu bar:

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Hide startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** Empty scratch buffer message
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC

** Set font
Default to JetBrains Mono, size 15:

#+BEGIN_SRC emacs-lisp
(defun my/set-frame-font ()
  (set-frame-font "JetBrains Mono-15" nil t))
(add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (my/set-frame-font)))
(my/set-frame-font)
#+END_SRC

** Theme
Use the Modus Operandi theme with slanted and bold elements:

#+BEGIN_SRC emacs-lisp
(use-package modus-themes
  :ensure t
  :init
  (setq modus-themes-slanted-constructs t
        modus-themes-bold-constructs t)
  :config
  (load-theme 'modus-operandi :no-confirm))
#+END_SRC

* Environment Configuration
Fine-tune default paths and fullscreen behavior.

** Default working directory
#+BEGIN_SRC emacs-lisp
(cd "~")
#+END_SRC

** Fullscreen toggle
Function to toggle fullscreen:

#+BEGIN_SRC emacs-lisp
(defun toggle-fullscreen ()
  (interactive)
  (if (eq (frame-parameter nil 'fullscreen) 'fullboth)
      (set-frame-parameter nil 'fullscreen nil)
    (set-frame-parameter nil 'fullscreen 'fullboth)))
#+END_SRC

** Bind F11 for fullscreen
#+BEGIN_SRC emacs-lisp
(global-set-key [f11] 'toggle-fullscreen)
#+END_SRC

** Start fullscreen by default
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . fullboth))
#+END_SRC

** Fullscreen for daemon-created frames
#+BEGIN_SRC emacs-lisp
(defun set-fullscreen-for-new-frame (frame)
  (set-frame-parameter frame 'fullscreen 'fullboth))
(add-hook 'after-make-frame-functions #'set-fullscreen-for-new-frame)
#+END_SRC

* Org Mode Setup
Customize Org Mode for cleaner visuals and efficient task tracking.

** Basic Org settings
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-hide-leading-stars t
        org-agenda-files '("~/org")
        org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE"))))
#+END_SRC

** Org Tempo for quick templates
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)

(defun org-tempo-src-emacs-lisp-tangle-yes ()
  "Insert an emacs-lisp block with :tangle yes."
  (interactive)
  (let ((content (org-tempo--expand-structure-template '("se" . "src emacs-lisp :tangle yes"))))
    (insert content)
    (search-backward "#+END_SRC")))
(with-eval-after-load 'org-tempo
  (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp :tangle yes")))
#+END_SRC

* Org-ai Integration
Bring GPT-4 into Org Mode using `org-ai`.

** Usage
Place your API token in `~/.emacs.d/secret.el`:

#+BEGIN_SRC emacs-lisp
(setq my-openai-api-token "your_api_key_here")
#+END_SRC

** Configuration
#+BEGIN_SRC emacs-lisp
(use-package org-ai
  :ensure
  :commands (org-ai-mode)
  :init
  (load-file "~/.emacs.d/secret.el")
  :custom
  (org-ai-openai-api-token my-openai-api-token)
  :config
  (setq org-ai-default-chat-model "gpt-4")
  (org-ai-install-yasnippets))
#+END_SRC

* About
My personal Windows 10 Emacs configuration.
